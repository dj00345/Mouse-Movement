// CODE I CREATED TO ADD A CREATE LEVEL SCREEN TO THE GAME TO IMPROVE UPON THE RECREATION

class CreateLevelScreen
    {
           Texture2D mouse_pic; //background picture
           Texture2D wall_pic; //start button picture
           Texture2D block_pic; //create level picture
           Texture2D void_pic; //Exit game pic
           char current_selection = 'b'; //the current selection of level editor
           int create_mode;

           KeyboardState old_keyboard_state;   //the old keyboard state
           KeyboardState keyState = Keyboard.GetState(); //the current keyboard state

           MouseState mouse1 = Mouse.GetState(); //the current mouse state
           MouseState oldmouse = Mouse.GetState(); //the old mouse state
           bool leftmouseclick = false; //was the mouse clicked
           bool rightmouseclick = false;
           private BlockState[,] BlockStates = new BlockState[GRID_WIDTH, GRID_HEIGHT];
           private MouseState old_mouse_state;
           CreateLevelOptionsScreen the_options_screen = new CreateLevelOptionsScreen();
           private const int GRID_WIDTH = 32;
           private const int GRID_HEIGHT = 32;

           private int MousePositionX;
           private int MousePositionY;

           const int GAME_BORDER_WIDTH = 8; //the floor area in the game
           const int GAME_BORDER_HEIGHT = 8; //the floor area in the game

           //width and height of cell, in pixels
           private const int CELL_WIDTH = 20;//SCREEN_WIDTH / GRID_WIDTH;
           private const int CELL_HEIGHT = 20;//SCREEN_HEIGHT / GRID_HEIGHT;
        
           //width and height of screen in pixels, since my array is the size of the screen, we need to multiply the array size by each cell size in order to fit the picture in it       
           const int SCREEN_WIDTH = (GRID_WIDTH * CELL_WIDTH) + 200;
           const int SCREEN_HEIGHT = GRID_HEIGHT * CELL_HEIGHT;

           private bool key_was_released(Keys key, KeyboardState new_state)
           {
               return old_keyboard_state.IsKeyDown(key) && new_state.IsKeyUp(key);
           }
            private void to_row_col(float x, float y, out int row, out int col)
            {
                col = (int)(x / CELL_WIDTH);
                row = (int)(y / CELL_HEIGHT);
            }
            public void LoadScreenContent(ContentManager Content)
            {
                mouse_pic = Content.Load<Texture2D>(@"media\mouse");
                wall_pic = Content.Load<Texture2D>(@"media\wall");
                void_pic = Content.Load<Texture2D>(@"media\void");
                block_pic = Content.Load<Texture2D>(@"media\block");
                the_options_screen.LoadScreenContent(Content);
            }
            
            public void Level_Editor_Initialize() //spawns our mouse into the center of the screen. can be changed very easily
            {
               
                for (int x = 0; x < GRID_WIDTH; x++)
                {
                    for (int y = 0; y < GRID_HEIGHT; y++)
                    {
                        BlockStates[x, y].tile = 'f';
                        if (x == 0 || x == (GRID_WIDTH - 1))
                        {
                            BlockStates[x, y].tile = 'w';
                        }
                        if (y == 0 || y == (GRID_HEIGHT - 1))
                        {
                            BlockStates[x, y].tile = 'w';
                        }
                        if (x >= GAME_BORDER_WIDTH && x <= (GRID_WIDTH - GAME_BORDER_WIDTH))
                        {
                            if (y >= GAME_BORDER_HEIGHT && y <= (GRID_HEIGHT - GAME_BORDER_HEIGHT)) //sets where the moveable blocks are placed
                            {
                                BlockStates[x, y].tile = 'b';
                            }
                        }
                    }
                }
                create_mode = 0;
                MousePositionX = (GRID_WIDTH / 2);
                MousePositionY = (GRID_HEIGHT / 2);
                BlockStates[MousePositionX, MousePositionY].tile = 'm';
               
            }
            public void saveLevel()
            {
                // create a writer and open the file
                TextWriter tw = new StreamWriter("CreatedLevel.txt");

                for (int y = 0; y < GRID_HEIGHT; y++)
                {
                  for (int x = 0; x < GRID_WIDTH; x++)
                  {
                    // write a line of text to the file
                    tw.Write(BlockStates[x,y].tile);
                  }
                  tw.Write("\n"); 
                }
                // close the stream
                tw.Close();
                
            }
            public void update(GameTime gameTime, ref int GameMode, ref bool newGame, ref bool play_created_level)
            {
                MouseState mouse_state = Mouse.GetState();
                KeyboardState keyState = Keyboard.GetState();
                int row, col;

                if (create_mode == 1)
                {
                    the_options_screen.Update(gameTime, ref create_mode, ref GameMode, this, ref newGame, ref play_created_level);
                }
                else
                {
                    if (keyState.IsKeyDown(Keys.Escape))
                    {
                        create_mode = 1;
                    }
                    if (keyState.IsKeyDown(Keys.D1))
                    {
                        current_selection = 'b';
                    }
                    else if (keyState.IsKeyDown(Keys.D2))
                    {
                        current_selection = 'w';
                    }
                    else if (keyState.IsKeyDown(Keys.M))
                    {
                        current_selection = 'm';
                    }
                    if (mouse_state.LeftButton == ButtonState.Pressed)
                    {
                        to_row_col(mouse_state.X, mouse_state.Y, out row, out col);
                        if ((row > 0 && row < (GRID_HEIGHT - 1)) && (col > 0 && col < (GRID_WIDTH - 1)))
                        {
                            leftmouseclick = true;
                        }
                    }
                    else if (mouse_state.LeftButton == ButtonState.Released &&
                        old_mouse_state.LeftButton == ButtonState.Pressed)
                    {
                        to_row_col(mouse_state.X, mouse_state.Y, out row, out col);
                        if ((row > 0 && row < (GRID_HEIGHT - 1)) && (col > 0 && col < (GRID_WIDTH - 1)))
                        {
                            if (leftmouseclick == true)
                            {
                                if (BlockStates[col, row].tile != 'm')
                                {
                                    BlockStates[col, row].tile = current_selection;
                                }
                                if (current_selection == 'm')
                                {
                                    BlockStates[MousePositionX, MousePositionY].tile = 'f';
                                    MousePositionX = col;
                                    MousePositionY = row;
                                    BlockStates[MousePositionX, MousePositionY].tile = 'm';
                                }
                            }
                        }
                        leftmouseclick = false;
                    }
                    if (mouse_state.RightButton == ButtonState.Pressed)
                    {
                        to_row_col(mouse_state.X, mouse_state.Y, out row, out col);
                        if ((row > 0 && row < (GRID_HEIGHT - 1)) && (col > 0 && col < (GRID_WIDTH - 1)))
                        {
                            rightmouseclick = true;
                        }
                    }
                    else if (mouse_state.RightButton == ButtonState.Released &&
                        old_mouse_state.RightButton == ButtonState.Pressed)
                    {
                        to_row_col(mouse_state.X, mouse_state.Y, out row, out col);
                        if ((row > 0 && row < (GRID_HEIGHT - 1)) && (col > 0 && col < (GRID_WIDTH - 1)))
                        {
                            if (rightmouseclick == true)
                            {
                                if (BlockStates[col, row].tile != 'm')
                                {
                                    BlockStates[col, row].tile = 'f';
                                }
                            }
                        }
                        rightmouseclick = false;
                    }
                    old_mouse_state = mouse_state;
                }
            }
            public void DrawScreen(SpriteBatch batch, GraphicsDeviceManager graphics)
            {
                if (create_mode == 1)
                {
                    the_options_screen.DrawScreen(batch, graphics);
                }
                else
                {
                    for (int y = 0; y < GRID_HEIGHT; y++) //row
                    {
                        for (int x = 0; x < GRID_WIDTH; x++) //column
                        {
                            Vector2 Grid_Pos = new Vector2(x * CELL_WIDTH, y * CELL_HEIGHT);
                            switch (BlockStates[x, y].tile) //draws the blocks in
                            {
                                case 'b':
                                    batch.Draw(block_pic, Grid_Pos, Color.White);
                                    break;
                                case 'w':
                                    batch.Draw(wall_pic, Grid_Pos, Color.White);
                                    break;
                                case 'm':
                                    batch.Draw(mouse_pic, Grid_Pos, Color.White);
                                    break;
                                case 'f':
                                    batch.Draw(void_pic, Grid_Pos, Color.White);
                                    break;
                            }
                        }
                    }
                }
            }
    }
